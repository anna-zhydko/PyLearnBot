import sqlite3 as sq
from prettytable import from_db_cursor
from PIL import Image, ImageDraw, ImageFont


expressions = [('1', '^', 'Збігається з виразом праворуч на початку рядка.\n'
                          'Він відповідає кожному такому екземпляру перед '
                     'кожним \n у рядку.'),
               ('2', '$', 'Збігається з виразом зліва в кінці рядка.\nВін відповідає кожному такому екземпляру перед '
                     'кожним \n у рядку.'),
               ('3', '.', 'Відповідає будь-якому символу,\nокрім обмежувачів рядка, наприклад \n.'),
               ('4', r'\d', 'Екранує спеціальні символи або\nпозначає класи символів.'),
               ('5', 'A|B', 'Відповідає виразу A або B. Якщо A\nзнайдено першим, B залишається невипробованим.'),
               ('6', '+', 'Жадібно відповідає виразу\nліворуч 1 або більше разів.'),
               ('7', '*', 'Жадібно відповідає виразу\nзліва від нього 0 або більше разів.'),
               ('8', '?', 'Жадібно відповідає виразу зліва\nвід нього 0 або 1 раз. Але якщо ? додається\nдо кваліфікаторів '
                     '(+, * і ?), він\nвиконуватиме збіги не жадібно.'),
               ('9', '{m}', 'Збігає вираз зліва від нього\nm разів, і не менше.'),
               ('10', '{m, n}', 'Збігається з виразом зліва\nвід m до n разів, і не менше.'),
               ('11', '{m, n}?', 'Узгоджує вираз зліва від нього\nm разів і ігнорує n. Побачити ? вище.'),
               ('12', '\w', 'Відповідає буквено-цифровим символам,\nщо означають a-z, A-Z і 0-9. Він також\nвідповідає '
                      'символу підкреслення, _'),
               ('13', '\d', 'Збігається з цифрами, що означає 0-9'),
               ('14', '\D', 'Збігається з будь-якими нецифрами'),
               ('15', '\s', r'Збігається з пробілами, які включають символи \t, \n, \r та пробіл'),
               ('16', '\S', 'Відповідає символам без пробілів.'),
               ('17', r'd\b', 'Збігається з межею (або порожнім рядком) на\nпочатку та в кінці слова, тобто між \w та \W.'),
               ('18', '\B', r'Збігається там, де \b не відповідає' + '\n тобто межі символів \w.'),
               ('19', '\A', 'Збігається з виразом праворуч від абсолютного початку\nрядка в однорядковому або багаторядковому режимі.'),
               ('20', '\Z', 'Збігається з виразом ліворуч від абсолютного кінця\nрядка в однорядковому або багаторядковому режимі'),
               ('21', '[]', 'Містить набір символів для відповідності.'),
               ('22', '[a-z]', 'Відповідає будь-якому алфавіту від a до z.'),
               ('23', '[a-z0-9]', 'Відповідає символам від a до z, а також від 0 до 9'),
               ('24', '()', 'Збігається з виразом у дужках і групує його.'),
               ('25', '(? )', 'Всередині таких дужок, ? діє як розширення нотації.\nЙого значення залежить від персонажа,\n'
                        'який знаходиться праворуч від нього.'),
               ]

base = sq.connect('pylearn.db')
cur = base.cursor()


def sql_start():
    # global base, cur
    # base = sq.connect('pylearn.db')
    # cur = base.cursor()
    if base:
        print('Data base connected OK')
    else:
        print('Data base connection failed')

    cur.execute('''
        CREATE TABLE IF NOT EXISTS expression1(
        id INTEGER PRIMARY KEY,
        number TEXT,
        character TEXT,
        description TEXT)
    ''')
    base.commit()

    # cur.execute('DELETE FROM expression1;')
    # base.commit()

    cur.execute("SELECT * FROM expression1")
    for row in cur.fetchall():
        print(row)

    # cur.executemany('INSERT INTO expression1 (number, character, description) VALUES (?,?,?)', expressions)
    # base.commit()


async def show_expressions():
    cur.execute("SELECT number, character, description FROM expression1")
    mytable = from_db_cursor(cur)
    print(mytable)
    im = Image.new("RGB", (800, 850), "white")
    draw = ImageDraw.Draw(im)
    font = ImageFont.truetype("FreeMono.ttf", 15)
    draw.text((5, 5), str(mytable), font=font, fill="black")

    # im.show()
    im.save("table.png", transparancy=0)
    # return mytable.get_string()
